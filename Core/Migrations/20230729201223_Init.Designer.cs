// <auto-generated />
using System;
using System.Collections.Generic;
using Core.Data;
using Core.Data.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Core.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230729201223_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ArtistRelease", b =>
                {
                    b.Property<int>("ReleaseArtistsId")
                        .HasColumnType("integer");

                    b.Property<int>("ReleasesId")
                        .HasColumnType("integer");

                    b.HasKey("ReleaseArtistsId", "ReleasesId");

                    b.HasIndex("ReleasesId");

                    b.ToTable("ArtistRelease");
                });

            modelBuilder.Entity("Core.Data.Artists.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<ImageDetails>>("ImageDetails")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("LabelId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SpotifyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TrackId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LabelId")
                        .IsUnique();

                    b.HasIndex("SpotifyId")
                        .IsUnique();

                    b.HasIndex("TrackId");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("Core.Data.Artists.SocialNetwork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NetworkId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SocialNetworks");
                });

            modelBuilder.Entity("Core.Data.Presentations.PresentationConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId")
                        .IsUnique();

                    b.ToTable("PresentationConfigs");
                });

            modelBuilder.Entity("Core.Data.Releases.Release", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<ImageDetails>>("ImageDetails")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SpotifyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TrackNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Upc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SpotifyId")
                        .IsUnique();

                    b.HasIndex("Upc")
                        .IsUnique();

                    b.ToTable("Releases");
                });

            modelBuilder.Entity("Core.Data.Releases.Track", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DiskNumber")
                        .HasColumnType("integer");

                    b.Property<int>("DurationSeconds")
                        .HasColumnType("integer");

                    b.Property<bool>("IsExplicit")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReleaseId")
                        .HasColumnType("integer");

                    b.Property<string>("SpotifyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TrackNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReleaseId");

                    b.ToTable("Track");
                });

            modelBuilder.Entity("ArtistRelease", b =>
                {
                    b.HasOne("Core.Data.Artists.Artist", null)
                        .WithMany()
                        .HasForeignKey("ReleaseArtistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Data.Releases.Release", null)
                        .WithMany()
                        .HasForeignKey("ReleasesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Data.Artists.Artist", b =>
                {
                    b.HasOne("Core.Data.Releases.Track", null)
                        .WithMany("Artists")
                        .HasForeignKey("TrackId");
                });

            modelBuilder.Entity("Core.Data.Presentations.PresentationConfig", b =>
                {
                    b.HasOne("Core.Data.Artists.Artist", "Artist")
                        .WithOne("PresentationConfig")
                        .HasForeignKey("Core.Data.Presentations.PresentationConfig", "ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("Core.Data.Releases.Track", b =>
                {
                    b.HasOne("Core.Data.Releases.Release", "Release")
                        .WithMany("Tracks")
                        .HasForeignKey("ReleaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Release");
                });

            modelBuilder.Entity("Core.Data.Artists.Artist", b =>
                {
                    b.Navigation("PresentationConfig");
                });

            modelBuilder.Entity("Core.Data.Releases.Release", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("Core.Data.Releases.Track", b =>
                {
                    b.Navigation("Artists");
                });
#pragma warning restore 612, 618
        }
    }
}
